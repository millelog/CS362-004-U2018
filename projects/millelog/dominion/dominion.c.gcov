        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    42360:    8:int compare(const void* a, const void* b) {
    42360:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    42360:   11:  if (*(int*)a < *(int*)b)
    11296:   12:    return -1;
    31064:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     8762:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     8762:   44:  SelectStream(1);
     8762:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     8762:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     1527:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     7235:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    29108:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   281726:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   259853:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
     6141:   63:        return -1;
        -:   64:      }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1094:   73:  if (numPlayers == 2)
        -:   74:    {
      458:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      636:   77:  else if (numPlayers == 3)
        -:   78:    {
      636:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1094:   87:  if (numPlayers == 2)
        -:   88:    {
      458:   89:      state->supplyCount[estate] = 8;
      458:   90:      state->supplyCount[duchy] = 8;
      458:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      636:   95:      state->supplyCount[estate] = 12;
      636:   96:      state->supplyCount[duchy] = 12;
      636:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1094:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1094:  102:  state->supplyCount[silver] = 40;
     1094:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    22974:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  107:    {
   196022:  108:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  109:  {
   182236:  110:    if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
     8094:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:    {
     1616:  115:      if (numPlayers == 2){
      358:  116:        state->supplyCount[i] = 8;
        -:  117:      }
      450:  118:      else{ state->supplyCount[i] = 12; }
        -:  119:    }
        -:  120:        else
        -:  121:    {
     7286:  122:      state->supplyCount[i] = 10;
        -:  123:    }
     8094:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
   174142:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:  }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     3918:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     2824:  140:      state->deckCount[i] = 0;
    11296:  141:      for (j = 0; j < 3; j++)
        -:  142:  {
     8472:  143:    state->deck[i][j] = estate;
     8472:  144:    state->deckCount[i]++;
        -:  145:  }
    22592:  146:      for (j = 3; j < 10; j++)
        -:  147:  {
    19768:  148:    state->deck[i][j] = copper;
    19768:  149:    state->deckCount[i]++;
        -:  150:  }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     3918:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     2824:  156:      if ( shuffle(i, state) < 0 )
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     3918:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     2824:  166:      state->handCount[i] = 0;
     2824:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
    30632:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    29538:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1094:  182:  state->outpostPlayed = 0;
     1094:  183:  state->phase = 0;
     1094:  184:  state->numActions = 1;
     1094:  185:  state->numBuys = 1;
     1094:  186:  state->playedCardCount = 0;
     1094:  187:  state->whoseTurn = 0;
     1094:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6564:  192:  for (it = 0; it < 5; it++){
     5470:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1094:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1094:  198:  return 0;
        -:  199:}
        -:  200:
     2824:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2824:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2824:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     2824:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    33888:  214:  while (state->deckCount[player] > 0) {
    28240:  215:    card = floor(Random() * state->deckCount[player]);
    28240:  216:    newDeck[newDeckPos] = state->deck[player][card];
    28240:  217:    newDeckPos++;
    97010:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    68770:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    28240:  221:    state->deckCount[player]--;
        -:  222:  }
    31064:  223:  for (i = 0; i < newDeckPos; i++) {
    28240:  224:    state->deck[player][i] = newDeck[i];
    28240:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2824:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:  {
    #####:  406:    j++;
        -:  407:  }
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:  {
    #####:  469:    players[i] = -9999;
        -:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
        -:  474:  }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:  {
    #####:  483:    j = i;
        -:  484:  }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:  {
    #####:  494:    players[i]++;
        -:  495:  }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:  {
    #####:  504:    j = i;
        -:  505:  }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:  {
    #####:  514:    players[i] = 1;
        -:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    31964:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:  int deckCounter;
    31964:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    31964:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    31964:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    31964:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    31964:  576:    state->deckCount[player]--;
    31964:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    31964:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
     2916:  646:int cardEffectSmithy(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
        -:  647:  //+3 Cards
    11664:  648:      for (int i = 0; i < 3; i++)
        -:  649:  {
     8748:  650:    drawCard(currentPlayer, state);
        -:  651:  }
        -:  652:
        -:  653:      //discard card from hand
     2916:  654:      discardCard(handPos, currentPlayer, state, 0);
     2916:  655:      return 0;
        -:  656:}
        -:  657:
     2975:  658:int cardEffectAdventurer(int card, int choice1, int choice2, int choice3, struct gameState* state, int handPos, int *bonus, int currentPlayer){
        -:  659:  int cardDrawn, temphand[MAX_HAND];
     2975:  660:  int z = 0;
     2975:  661:  int drawntreasure=0;
    20825:  662:        while(drawntreasure<2){
    14875:  663:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  664:    shuffle(currentPlayer, state);
        -:  665:  }
    14875:  666:  drawCard(currentPlayer, state);
    14875:  667:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    14875:  668:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     5950:  669:    drawntreasure++;
        -:  670:  else{
     8925:  671:    temphand[z]=cardDrawn;
     8925:  672:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     8925:  673:    z++;
        -:  674:  }
        -:  675:      }
    14875:  676:      while(z-1>=0){
     8925:  677:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     8925:  678:  z=z-1;
        -:  679:      }
     2975:  680:      return 0;
        -:  681:}
    #####:  682:int cardEffectMine(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
        -:  683:
    #####:  684:      int  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  685:
    #####:  686:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  687:  {
    #####:  688:    return -1;
        -:  689:  }
        -:  690:
    #####:  691:      if (choice2 > treasure_map || choice2 < curse)
        -:  692:  {
    #####:  693:    return -1;
        -:  694:  }
        -:  695:
    #####:  696:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  697:  {
    #####:  698:    return 0;
        -:  699:  }
        -:  700:
    #####:  701:      gainCard(choice2, state, 2, currentPlayer);
        -:  702:
        -:  703:      //discard card from hand
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
        -:  705:
        -:  706:      //discard trashed card
    #####:  707:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  708:  {
    #####:  709:    if (state->hand[currentPlayer][i] == j)
        -:  710:      {
    #####:  711:        discardCard(i, currentPlayer, state, 0);
    #####:  712:        break;
        -:  713:      }
        -:  714:  }
        -:  715:
    #####:  716:      return 0;
        -:  717:
        -:  718:}
     2871:  719:int cardEffectVillage(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
        -:  720://+1 Card
     2871:  721:      drawCard(currentPlayer, state);
        -:  722:
        -:  723:      //+2 Actions
     2871:  724:      state->numActions = state->numActions + 2;
        -:  725:
        -:  726:      //discard played card from hand
     2871:  727:      discardCard(handPos, currentPlayer, state, 0);
     2871:  728:      return 0;
        -:  729:}
    #####:  730:int cardEffectBaron(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
    #####:  731:      state->numBuys++;//Increase buys by 1!
    #####:  732:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  733:  int p = 0;//Iterator for hand!
    #####:  734:  int card_not_discarded = 1;//Flag for discard set!
    #####:  735:  while(card_not_discarded){
    #####:  736:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  737:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  738:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  739:      state->discardCount[currentPlayer]++;
    #####:  740:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  741:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  742:      }
    #####:  743:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  744:      state->handCount[currentPlayer]--;
    #####:  745:      card_not_discarded = 0;//Exit the loop
        -:  746:    }
    #####:  747:    else if (p > state->handCount[currentPlayer]){
        -:  748:      if(DEBUG) {
        -:  749:        printf("No estate cards in your hand, invalid choice\n");
        -:  750:        printf("Must gain an estate if there are any\n");
        -:  751:      }
    #####:  752:      if (supplyCount(estate, state) > 0){
    #####:  753:        gainCard(estate, state, 0, currentPlayer);
    #####:  754:        state->supplyCount[estate]--;//Decrement estates
        -:  755:      }
    #####:  756:      card_not_discarded = 0;//Exit the loop
        -:  757:    }
        -:  758:
        -:  759:    else{
    #####:  760:      p++;//Next card
        -:  761:    }
        -:  762:  }
        -:  763:      }
        -:  764:
        -:  765:      else{
    #####:  766:  if (supplyCount(estate, state) > 0){
    #####:  767:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  768:    state->supplyCount[estate]--;//Decrement Estates
    #####:  769:    if (supplyCount(estate, state) == 0){
    #####:  770:      isGameOver(state);
        -:  771:    }
        -:  772:  }
        -:  773:      }
        -:  774:
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:}
        -:  779:
    #####:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
        -:  782:  int i;
        -:  783:  int j;
        -:  784:  int k;
        -:  785:  int x;
        -:  786:  int index;
    #####:  787:  int currentPlayer = whoseTurn(state);
    #####:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
    #####:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:
        -:  792:  int cardDrawn;
        -:  793:  int temphand[MAX_HAND];// moved above the if statement
        -:  794:
    #####:  795:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:
        -:  799:
        -:  800:  //uses switch to select card and perform actions
    #####:  801:  switch( card )
        -:  802:    {
        -:  803:    case adventurer:
        -:  804:
    #####:  805:      return cardEffectAdventurer(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  806:
        -:  807:    case village:
        -:  808:
    #####:  809:      return cardEffectVillage(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  810:
        -:  811:    case council_room:
        -:  812:      //+4 Cards
    #####:  813:      for (i = 0; i < 4; i++)
        -:  814:  {
    #####:  815:    drawCard(currentPlayer, state);
        -:  816:  }
        -:  817:
        -:  818:      //+1 Buy
    #####:  819:      state->numBuys++;
        -:  820:
        -:  821:      //Each other player draws a card
    #####:  822:      for (i = 0; i < state->numPlayers; i++)
        -:  823:  {
    #####:  824:    if ( i != currentPlayer )
        -:  825:      {
    #####:  826:        drawCard(i, state);
        -:  827:      }
        -:  828:  }
        -:  829:
        -:  830:      //put played card in played card pile
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:
    #####:  833:      return 0;
        -:  834:
        -:  835:    case feast:
        -:  836:      //gain card with cost up to 5
        -:  837:      //Backup hand
    #####:  838:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  839:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  840:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  841:      }
        -:  842:      //Backup hand
        -:  843:
        -:  844:      //Update Coins for Buy
    #####:  845:      updateCoins(currentPlayer, state, 5);
    #####:  846:      x = 1;//Condition to loop on
    #####:  847:      while( x == 1) {//Buy one card
    #####:  848:  if (supplyCount(choice1, state) <= 0){
        -:  849:    if (DEBUG)
        -:  850:      printf("None of that card left, sorry!\n");
        -:  851:
        -:  852:    if (DEBUG){
        -:  853:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  854:    }
        -:  855:  }
    #####:  856:  else if (state->coins < getCost(choice1)){
    #####:  857:    printf("That card is too expensive!\n");
        -:  858:
        -:  859:    if (DEBUG){
        -:  860:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  861:    }
        -:  862:  }
        -:  863:  else{
        -:  864:
        -:  865:    if (DEBUG){
        -:  866:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  867:    }
        -:  868:
    #####:  869:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  870:    x = 0;//No more buying cards
        -:  871:
        -:  872:    if (DEBUG){
        -:  873:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  874:    }
        -:  875:
        -:  876:  }
        -:  877:      }
        -:  878:
        -:  879:      //Reset Hand
    #####:  880:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  881:  state->hand[currentPlayer][i] = temphand[i];
    #####:  882:  temphand[i] = -1;
        -:  883:      }
        -:  884:      //Reset Hand
        -:  885:
    #####:  886:      return 0;
        -:  887:
        -:  888:    case gardens:
    #####:  889:      return -1;
        -:  890:
        -:  891:    case mine:
        -:  892:
    #####:  893:      return cardEffectMine(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  894:
        -:  895:    case remodel:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  899:  {
    #####:  900:    return -1;
        -:  901:  }
        -:  902:
    #####:  903:      gainCard(choice2, state, 0, currentPlayer);
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  910:  {
    #####:  911:    if (state->hand[currentPlayer][i] == j)
        -:  912:      {
    #####:  913:        discardCard(i, currentPlayer, state, 0);
    #####:  914:        break;
        -:  915:      }
        -:  916:  }
        -:  917:
        -:  918:
    #####:  919:      return 0;
        -:  920:
        -:  921:    case smithy:
        -:  922:
    #####:  923:      return cardEffectSmithy(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  924:
        -:  925:    case baron:
        -:  926:
    #####:  927:      return cardEffectBaron(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  928:
        -:  929:
        -:  930:    case great_hall:
        -:  931:      //+1 Card
    #####:  932:      drawCard(currentPlayer, state);
        -:  933:
        -:  934:      //+1 Actions
    #####:  935:      state->numActions++;
        -:  936:
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
    #####:  939:      return 0;
        -:  940:
        -:  941:    case minion:
        -:  942:      //+1 action
    #####:  943:      state->numActions++;
        -:  944:
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
        -:  947:
    #####:  948:      if (choice1)    //+2 coins
        -:  949:  {
    #####:  950:    state->coins = state->coins + 2;
        -:  951:  }
        -:  952:
    #####:  953:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  954:  {
        -:  955:    //discard hand
    #####:  956:    while(numHandCards(state) > 0)
        -:  957:      {
    #####:  958:        discardCard(handPos, currentPlayer, state, 0);
        -:  959:      }
        -:  960:
        -:  961:    //draw 4
    #####:  962:    for (i = 0; i < 4; i++)
        -:  963:      {
    #####:  964:        drawCard(currentPlayer, state);
        -:  965:      }
        -:  966:
        -:  967:    //other players discard hand and redraw if hand size > 4
    #####:  968:    for (i = 0; i < state->numPlayers; i++)
        -:  969:      {
    #####:  970:        if (i != currentPlayer)
        -:  971:    {
    #####:  972:      if ( state->handCount[i] > 4 )
        -:  973:        {
        -:  974:          //discard hand
    #####:  975:          while( state->handCount[i] > 0 )
        -:  976:      {
    #####:  977:        discardCard(handPos, i, state, 0);
        -:  978:      }
        -:  979:
        -:  980:          //draw 4
    #####:  981:          for (j = 0; j < 4; j++)
        -:  982:      {
    #####:  983:        drawCard(i, state);
        -:  984:      }
        -:  985:        }
        -:  986:    }
        -:  987:      }
        -:  988:
        -:  989:  }
    #####:  990:      return 0;
        -:  991:
        -:  992:    case steward:
    #####:  993:      if (choice1 == 1)
        -:  994:  {
        -:  995:    //+2 cards
    #####:  996:    drawCard(currentPlayer, state);
    #####:  997:    drawCard(currentPlayer, state);
        -:  998:  }
    #####:  999:      else if (choice1 == 2)
        -: 1000:  {
        -: 1001:    //+2 coins
    #####: 1002:    state->coins = state->coins + 2;
        -: 1003:  }
        -: 1004:      else
        -: 1005:  {
        -: 1006:    //trash 2 cards in hand
    #####: 1007:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1008:    discardCard(choice3, currentPlayer, state, 1);
        -: 1009:  }
        -: 1010:
        -: 1011:      //discard card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1013:      return 0;
        -: 1014:
        -: 1015:    case tribute:
    #####: 1016:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1017:  if (state->deckCount[nextPlayer] > 0){
    #####: 1018:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1019:    state->deckCount[nextPlayer]--;
        -: 1020:  }
    #####: 1021:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1022:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1023:    state->discardCount[nextPlayer]--;
        -: 1024:  }
        -: 1025:  else{
        -: 1026:    //No Card to Reveal
        -: 1027:    if (DEBUG){
        -: 1028:      printf("No cards to reveal\n");
        -: 1029:    }
        -: 1030:  }
        -: 1031:      }
        -: 1032:
        -: 1033:      else{
    #####: 1034:  if (state->deckCount[nextPlayer] == 0){
    #####: 1035:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1036:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1037:      state->deckCount[nextPlayer]++;
    #####: 1038:      state->discard[nextPlayer][i] = -1;
    #####: 1039:      state->discardCount[nextPlayer]--;
        -: 1040:    }
        -: 1041:
    #####: 1042:    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1043:  }
    #####: 1044:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1045:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1046:  state->deckCount[nextPlayer]--;
    #####: 1047:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:  state->deckCount[nextPlayer]--;
        -: 1050:      }
        -: 1051:
    #####: 1052:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1053:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1054:  state->playedCardCount++;
    #####: 1055:  tributeRevealedCards[1] = -1;
        -: 1056:      }
        -: 1057:
    #####: 1058:      for (i = 0; i <= 2; i ++){
    #####: 1059:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1060:    state->coins += 2;
        -: 1061:  }
        -: 1062:
    #####: 1063:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1064:    drawCard(currentPlayer, state);
    #####: 1065:    drawCard(currentPlayer, state);
        -: 1066:  }
        -: 1067:  else{//Action Card
    #####: 1068:    state->numActions = state->numActions + 2;
        -: 1069:  }
        -: 1070:      }
        -: 1071:
    #####: 1072:      return 0;
        -: 1073:
        -: 1074:    case ambassador:
    #####: 1075:      j = 0;    //used to check if player has enough cards to discard
        -: 1076:
    #####: 1077:      if (choice2 > 2 || choice2 < 0)
        -: 1078:  {
    #####: 1079:    return -1;
        -: 1080:  }
        -: 1081:
    #####: 1082:      if (choice1 == handPos)
        -: 1083:  {
    #####: 1084:    return -1;
        -: 1085:  }
        -: 1086:
    #####: 1087:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1088:  {
    #####: 1089:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1090:      {
    #####: 1091:        j++;
        -: 1092:      }
        -: 1093:  }
    #####: 1094:      if (j < choice2)
        -: 1095:  {
    #####: 1096:    return -1;
        -: 1097:  }
        -: 1098:
        -: 1099:      if (DEBUG)
        -: 1100:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1101:
        -: 1102:      //increase supply count for choosen card by amount being discarded
    #####: 1103:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1104:
        -: 1105:      //each other player gains a copy of revealed card
    #####: 1106:      for (i = 0; i < state->numPlayers; i++)
        -: 1107:  {
    #####: 1108:    if (i != currentPlayer)
        -: 1109:      {
    #####: 1110:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1111:      }
        -: 1112:  }
        -: 1113:
        -: 1114:      //discard played card from hand
    #####: 1115:      discardCard(handPos, currentPlayer, state, 0);
        -: 1116:
        -: 1117:      //trash copies of cards returned to supply
    #####: 1118:      for (j = 0; j < choice2; j++)
        -: 1119:  {
    #####: 1120:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1121:      {
    #####: 1122:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1123:    {
    #####: 1124:      discardCard(i, currentPlayer, state, 1);
    #####: 1125:      break;
        -: 1126:    }
        -: 1127:      }
        -: 1128:  }
        -: 1129:
    #####: 1130:      return 0;
        -: 1131:
        -: 1132:    case cutpurse:
        -: 1133:
    #####: 1134:      updateCoins(currentPlayer, state, 2);
    #####: 1135:      for (i = 0; i < state->numPlayers; i++)
        -: 1136:  {
    #####: 1137:    if (i != currentPlayer)
        -: 1138:      {
    #####: 1139:        for (j = 0; j < state->handCount[i]; j++)
        -: 1140:    {
    #####: 1141:      if (state->hand[i][j] == copper)
        -: 1142:        {
    #####: 1143:          discardCard(j, i, state, 0);
    #####: 1144:          break;
        -: 1145:        }
    #####: 1146:      if (j == state->handCount[i])
        -: 1147:        {
    #####: 1148:          for (k = 0; k < state->handCount[i]; k++)
        -: 1149:      {
        -: 1150:        if (DEBUG)
        -: 1151:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1152:      }
    #####: 1153:          break;
        -: 1154:        }
        -: 1155:    }
        -: 1156:
        -: 1157:      }
        -: 1158:
        -: 1159:  }
        -: 1160:
        -: 1161:      //discard played card from hand
    #####: 1162:      discardCard(handPos, currentPlayer, state, 0);
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:
        -: 1166:
        -: 1167:    case embargo:
        -: 1168:      //+2 Coins
    #####: 1169:      state->coins = state->coins + 2;
        -: 1170:
        -: 1171:      //see if selected pile is in play
    #####: 1172:      if ( state->supplyCount[choice1] == -1 )
        -: 1173:  {
    #####: 1174:    return -1;
        -: 1175:  }
        -: 1176:
        -: 1177:      //add embargo token to selected supply pile
    #####: 1178:      state->embargoTokens[choice1]++;
        -: 1179:
        -: 1180:      //trash card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1182:      return 0;
        -: 1183:
        -: 1184:    case outpost:
        -: 1185:      //set outpost flag
    #####: 1186:      state->outpostPlayed++;
        -: 1187:
        -: 1188:      //discard card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1190:      return 0;
        -: 1191:
        -: 1192:    case salvager:
        -: 1193:      //+1 buy
    #####: 1194:      state->numBuys++;
        -: 1195:
    #####: 1196:      if (choice1)
        -: 1197:  {
        -: 1198:    //gain coins equal to trashed card
    #####: 1199:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1200:    //trash card
    #####: 1201:    discardCard(choice1, currentPlayer, state, 1);
        -: 1202:  }
        -: 1203:
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1206:      return 0;
        -: 1207:
        -: 1208:    case sea_hag:
    #####: 1209:      for (i = 0; i < state->numPlayers; i++){
    #####: 1210:  if (i != currentPlayer){
    #####: 1211:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1212:    state->discardCount[i]++;
    #####: 1213:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1214:  }
        -: 1215:      }
    #####: 1216:      return 0;
        -: 1217:
        -: 1218:    case treasure_map:
        -: 1219:      //search hand for another treasure_map
    #####: 1220:      index = -1;
    #####: 1221:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1222:  {
    #####: 1223:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1224:      {
    #####: 1225:        index = i;
    #####: 1226:        break;
        -: 1227:      }
        -: 1228:  }
    #####: 1229:      if (index > -1)
        -: 1230:  {
        -: 1231:    //trash both treasure cards
    #####: 1232:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1233:    discardCard(index, currentPlayer, state, 1);
        -: 1234:
        -: 1235:    //gain 4 Gold cards
    #####: 1236:    for (i = 0; i < 4; i++)
        -: 1237:      {
    #####: 1238:        gainCard(gold, state, 1, currentPlayer);
        -: 1239:      }
        -: 1240:
        -: 1241:    //return success
    #####: 1242:    return 1;
        -: 1243:  }
        -: 1244:
        -: 1245:      //no second treasure_map found in hand
    #####: 1246:      return -1;
        -: 1247:    }
        -: 1248:
    #####: 1249:  return -1;
        -: 1250:}
        -: 1251:
     5787: 1252:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1253:{
        -: 1254:
        -: 1255:  //if card is not trashed, added to Played pile
     5787: 1256:  if (trashFlag < 1)
        -: 1257:    {
        -: 1258:      //add card to played pile
     5787: 1259:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     5787: 1260:      state->playedCardCount++;
        -: 1261:    }
        -: 1262:
        -: 1263:  //set played card to -1
     5787: 1264:  state->hand[currentPlayer][handPos] = -1;
        -: 1265:
        -: 1266:  //remove card from player's hand
     5787: 1267:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
        -: 1271:    }
     5787: 1272:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
    #####: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
        -: 1277:  else
        -: 1278:    {
        -: 1279:      //replace discarded card with last card in hand
     5787: 1280:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1281:      //set last card to -1
     5787: 1282:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1283:      //reduce number of cards in hand
     5787: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:
     5787: 1287:    if(state->playedCardCount>0){
     5787: 1288:      state->discardCount[currentPlayer]++;
     5787: 1289:      state->discard[currentPlayer][state->discardCount[currentPlayer]-1];
     5787: 1290:      state->playedCardCount=0;
        -: 1291:    }
        -: 1292:
     5787: 1293:  return 0;
        -: 1294:}
        -: 1295:
    #####: 1296:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1297:{
        -: 1298:  //Note: supplyPos is enum of choosen card
        -: 1299:
        -: 1300:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1301:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1302:    {
    #####: 1303:      return -1;
        -: 1304:    }
        -: 1305:
        -: 1306:  //added card for [whoseTurn] current player:
        -: 1307:  // toFlag = 0 : add to discard
        -: 1308:  // toFlag = 1 : add to deck
        -: 1309:  // toFlag = 2 : add to hand
        -: 1310:
    #####: 1311:  if (toFlag == 1)
        -: 1312:    {
    #####: 1313:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1314:      state->deckCount[player]++;
        -: 1315:    }
    #####: 1316:  else if (toFlag == 2)
        -: 1317:    {
    #####: 1318:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1319:      state->handCount[player]++;
        -: 1320:    }
        -: 1321:  else
        -: 1322:    {
    #####: 1323:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1324:      state->discardCount[player]++;
        -: 1325:    }
        -: 1326:
        -: 1327:  //decrease number in supply pile
    #####: 1328:  state->supplyCount[supplyPos]--;
        -: 1329:
    #####: 1330:  return 0;
        -: 1331:}
        -: 1332:
     1094: 1333:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1334:{
        -: 1335:  int i;
        -: 1336:
        -: 1337:  //reset coin count
     1094: 1338:  state->coins = 0;
        -: 1339:
        -: 1340:  //add coins for each Treasure card in player's hand
     6564: 1341:  for (i = 0; i < state->handCount[player]; i++)
        -: 1342:    {
     5470: 1343:      if (state->hand[player][i] == copper)
        -: 1344:  {
     4228: 1345:    state->coins += 1;
        -: 1346:  }
     1242: 1347:      else if (state->hand[player][i] == silver)
        -: 1348:  {
    #####: 1349:    state->coins += 2;
        -: 1350:  }
     1242: 1351:      else if (state->hand[player][i] == gold)
        -: 1352:  {
    #####: 1353:    state->coins += 3;
        -: 1354:  }
        -: 1355:    }
        -: 1356:
        -: 1357:  //add bonus
     1094: 1358:  state->coins += bonus;
        -: 1359:
     1094: 1360:  return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
