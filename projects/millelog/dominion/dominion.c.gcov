        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   271202:    8:int compare(const void* a, const void* b) {
   271202:    9:  if (*(int*)a > *(int*)b)
    31358:   10:    return 1;
   239844:   11:  if (*(int*)a < *(int*)b)
    64160:   12:    return -1;
   175684:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    43670:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
    43670:   44:  SelectStream(1);
    43670:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
    43670:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     7348:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    36322:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   144645:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1399404:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1291081:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    31047:   63:        return -1;
        -:   64:      }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     5275:   73:  if (numPlayers == 2)
        -:   74:    {
     2116:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     3159:   77:  else if (numPlayers == 3)
        -:   78:    {
     3159:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     5275:   87:  if (numPlayers == 2)
        -:   88:    {
     2116:   89:      state->supplyCount[estate] = 8;
     2116:   90:      state->supplyCount[duchy] = 8;
     2116:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     3159:   95:      state->supplyCount[estate] = 12;
     3159:   96:      state->supplyCount[duchy] = 12;
     3159:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     5275:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     5275:  102:  state->supplyCount[silver] = 40;
     5275:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   110775:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  107:    {
   945455:  108:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  109:  {
   879035:  110:    if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
    39080:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:    {
     7626:  115:      if (numPlayers == 2){
     1452:  116:        state->supplyCount[i] = 8;
        -:  117:      }
     2361:  118:      else{ state->supplyCount[i] = 12; }
        -:  119:    }
        -:  120:        else
        -:  121:    {
    35267:  122:      state->supplyCount[i] = 10;
        -:  123:    }
    39080:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
   839955:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:  }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    18984:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    13709:  140:      state->deckCount[i] = 0;
    54836:  141:      for (j = 0; j < 3; j++)
        -:  142:  {
    41127:  143:    state->deck[i][j] = estate;
    41127:  144:    state->deckCount[i]++;
        -:  145:  }
   109672:  146:      for (j = 3; j < 10; j++)
        -:  147:  {
    95963:  148:    state->deck[i][j] = copper;
    95963:  149:    state->deckCount[i]++;
        -:  150:  }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    18984:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    13709:  156:      if ( shuffle(i, state) < 0 )
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    18984:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
    13709:  166:      state->handCount[i] = 0;
    13709:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
   147700:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   142425:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     5275:  182:  state->outpostPlayed = 0;
     5275:  183:  state->phase = 0;
     5275:  184:  state->numActions = 1;
     5275:  185:  state->numBuys = 1;
     5275:  186:  state->playedCardCount = 0;
     5275:  187:  state->whoseTurn = 0;
     5275:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    31650:  192:  for (it = 0; it < 5; it++){
    26375:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     5275:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     5275:  198:  return 0;
        -:  199:}
        -:  200:
    13792:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    13792:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    13792:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    13792:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   175784:  214:  while (state->deckCount[player] > 0) {
   148200:  215:    card = floor(Random() * state->deckCount[player]);
   148200:  216:    newDeck[newDeckPos] = state->deck[player][card];
   148200:  217:    newDeckPos++;
   948875:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   800675:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   148200:  221:    state->deckCount[player]--;
        -:  222:  }
   161992:  223:  for (i = 0; i < newDeckPos; i++) {
   148200:  224:    state->deck[player][i] = newDeck[i];
   148200:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    13792:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:  {
    #####:  406:    j++;
        -:  407:  }
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:  {
    #####:  469:    players[i] = -9999;
        -:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
        -:  474:  }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:  {
    #####:  483:    j = i;
        -:  484:  }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:  {
    #####:  494:    players[i]++;
        -:  495:  }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:  {
    #####:  504:    j = i;
        -:  505:  }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:  {
    #####:  514:    players[i] = 1;
        -:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   157385:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:  int deckCounter;
   157385:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    11193:  533:    for (i = 0; i < state->discardCount[player];i++){
    11110:  534:      state->deck[player][i] = state->discard[player][i];
    11110:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       83:  538:    state->deckCount[player] = state->discardCount[player];
       83:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       83:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
       83:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       83:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
       83:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       83:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       83:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       83:  563:    state->deckCount[player]--;
       83:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   157302:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   157302:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   157302:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   157302:  576:    state->deckCount[player]--;
   157302:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   157385:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    43670:  646:int cardEffectSmithy(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
        -:  647:  //+3 Cards
   174680:  648:      for (int i = 0; i < 3; i++)
        -:  649:  {
   131010:  650:    drawCard(currentPlayer, state);
        -:  651:  }
        -:  652:
        -:  653:      //discard card from hand
    43670:  654:      discardCard(handPos, currentPlayer, state, 0);
    43670:  655:      return 0;
        -:  656:}
        -:  657:
    #####:  658:int cardEffectAdventurer(int card, int choice1, int choice2, int choice3, struct gameState state, int handPos, int *bonus, int currentPlayer, int *cardDrawn, int (*temphand)[MAX_HAND]){
    #####:  659:  int z = 0;
    #####:  660:  int drawntreasure=0;
    #####:  661:        while(drawntreasure<2){
    #####:  662:  if (state.deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  663:    shuffle(currentPlayer, &state);
        -:  664:  }
    #####:  665:  drawCard(currentPlayer, &state);
    #####:  666:  *cardDrawn = state.hand[currentPlayer][state.handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  667:  if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
    #####:  668:    drawntreasure++;
        -:  669:  else{
    #####:  670:    *temphand[z]=*cardDrawn;
    #####:  671:    state.handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  672:    z++;
        -:  673:  }
        -:  674:      }
    #####:  675:      while(z-1>=0){
    #####:  676:  state.discard[currentPlayer][state.discardCount[currentPlayer]++]=*temphand[z-1]; // discard all cards in play that have been drawn
    #####:  677:  z=z-1;
        -:  678:      }
    #####:  679:      return 0;
        -:  680:}
    #####:  681:int cardEffectMine(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
        -:  682:
    #####:  683:      int  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  684:
    #####:  685:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  686:  {
    #####:  687:    return -1;
        -:  688:  }
        -:  689:
    #####:  690:      if (choice2 > treasure_map || choice2 < curse)
        -:  691:  {
    #####:  692:    return -1;
        -:  693:  }
        -:  694:
    #####:  695:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  696:  {
    #####:  697:    return 0;
        -:  698:  }
        -:  699:
    #####:  700:      gainCard(choice2, state, 2, currentPlayer);
        -:  701:
        -:  702:      //discard card from hand
    #####:  703:      discardCard(handPos, currentPlayer, state, 0);
        -:  704:
        -:  705:      //discard trashed card
    #####:  706:      for (int i = 0; i < state->handCount[currentPlayer]; i++)
        -:  707:  {
    #####:  708:    if (state->hand[currentPlayer][i] == j)
        -:  709:      {
    #####:  710:        discardCard(i, currentPlayer, state, 0);
    #####:  711:        break;
        -:  712:      }
        -:  713:  }
        -:  714:
    #####:  715:      return 0;
        -:  716:
        -:  717:}
    #####:  718:int cardEffectVillage(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
        -:  719://+1 Card
    #####:  720:      drawCard(currentPlayer, state);
        -:  721:
        -:  722:      //+2 Actions
    #####:  723:      state->numActions = state->numActions + 2;
        -:  724:
        -:  725:      //discard played card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
    #####:  727:      return 0;
        -:  728:}
    #####:  729:int cardEffectBaron(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus, int currentPlayer){
    #####:  730:      state->numBuys++;//Increase buys by 1!
    #####:  731:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  732:  int p = 0;//Iterator for hand!
    #####:  733:  int card_not_discarded = 1;//Flag for discard set!
    #####:  734:  while(card_not_discarded){
    #####:  735:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  736:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  737:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  738:      state->discardCount[currentPlayer]++;
    #####:  739:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  740:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  741:      }
    #####:  742:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  743:      state->handCount[currentPlayer]--;
    #####:  744:      card_not_discarded = 0;//Exit the loop
        -:  745:    }
    #####:  746:    else if (p > state->handCount[currentPlayer]){
        -:  747:      if(DEBUG) {
        -:  748:        printf("No estate cards in your hand, invalid choice\n");
        -:  749:        printf("Must gain an estate if there are any\n");
        -:  750:      }
    #####:  751:      if (supplyCount(estate, state) > 0){
    #####:  752:        gainCard(estate, state, 0, currentPlayer);
    #####:  753:        state->supplyCount[estate]--;//Decrement estates
        -:  754:      }
    #####:  755:      card_not_discarded = 0;//Exit the loop
        -:  756:    }
        -:  757:
        -:  758:    else{
    #####:  759:      p++;//Next card
        -:  760:    }
        -:  761:  }
        -:  762:      }
        -:  763:
        -:  764:      else{
    #####:  765:  if (supplyCount(estate, state) > 0){
    #####:  766:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  767:    state->supplyCount[estate]--;//Decrement Estates
    #####:  768:    if (supplyCount(estate, state) == 0){
    #####:  769:      isGameOver(state);
        -:  770:    }
        -:  771:  }
        -:  772:      }
        -:  773:
        -:  774:
    #####:  775:      return 0;
        -:  776:
        -:  777:}
        -:  778:
    #####:  779:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  780:{
        -:  781:  int i;
        -:  782:  int j;
        -:  783:  int k;
        -:  784:  int x;
        -:  785:  int index;
    #####:  786:  int currentPlayer = whoseTurn(state);
    #####:  787:  int nextPlayer = currentPlayer + 1;
        -:  788:
    #####:  789:  int tributeRevealedCards[2] = {-1, -1};
        -:  790:
        -:  791:  int cardDrawn;
        -:  792:  int temphand[MAX_HAND];// moved above the if statement
        -:  793:
    #####:  794:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  795:    nextPlayer = 0;
        -:  796:  }
        -:  797:
        -:  798:
        -:  799:  //uses switch to select card and perform actions
    #####:  800:  switch( card )
        -:  801:    {
        -:  802:    case adventurer:
        -:  803:
    #####:  804:      return cardEffectAdventurer(card, choice1, choice2, choice3, *state, handPos, bonus, currentPlayer, &cardDrawn, &temphand);
        -:  805:
        -:  806:    case village:
        -:  807:
    #####:  808:      return cardEffectVillage(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  809:
        -:  810:    case council_room:
        -:  811:      //+4 Cards
    #####:  812:      for (i = 0; i < 4; i++)
        -:  813:  {
    #####:  814:    drawCard(currentPlayer, state);
        -:  815:  }
        -:  816:
        -:  817:      //+1 Buy
    #####:  818:      state->numBuys++;
        -:  819:
        -:  820:      //Each other player draws a card
    #####:  821:      for (i = 0; i < state->numPlayers; i++)
        -:  822:  {
    #####:  823:    if ( i != currentPlayer )
        -:  824:      {
    #####:  825:        drawCard(i, state);
        -:  826:      }
        -:  827:  }
        -:  828:
        -:  829:      //put played card in played card pile
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
        -:  831:
    #####:  832:      return 0;
        -:  833:
        -:  834:    case feast:
        -:  835:      //gain card with cost up to 5
        -:  836:      //Backup hand
    #####:  837:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  838:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  839:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  840:      }
        -:  841:      //Backup hand
        -:  842:
        -:  843:      //Update Coins for Buy
    #####:  844:      updateCoins(currentPlayer, state, 5);
    #####:  845:      x = 1;//Condition to loop on
    #####:  846:      while( x == 1) {//Buy one card
    #####:  847:  if (supplyCount(choice1, state) <= 0){
        -:  848:    if (DEBUG)
        -:  849:      printf("None of that card left, sorry!\n");
        -:  850:
        -:  851:    if (DEBUG){
        -:  852:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  853:    }
        -:  854:  }
    #####:  855:  else if (state->coins < getCost(choice1)){
    #####:  856:    printf("That card is too expensive!\n");
        -:  857:
        -:  858:    if (DEBUG){
        -:  859:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  860:    }
        -:  861:  }
        -:  862:  else{
        -:  863:
        -:  864:    if (DEBUG){
        -:  865:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  866:    }
        -:  867:
    #####:  868:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  869:    x = 0;//No more buying cards
        -:  870:
        -:  871:    if (DEBUG){
        -:  872:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  873:    }
        -:  874:
        -:  875:  }
        -:  876:      }
        -:  877:
        -:  878:      //Reset Hand
    #####:  879:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  880:  state->hand[currentPlayer][i] = temphand[i];
    #####:  881:  temphand[i] = -1;
        -:  882:      }
        -:  883:      //Reset Hand
        -:  884:
    #####:  885:      return 0;
        -:  886:
        -:  887:    case gardens:
    #####:  888:      return -1;
        -:  889:
        -:  890:    case mine:
        -:  891:
    #####:  892:      return cardEffectMine(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  893:
        -:  894:    case remodel:
    #####:  895:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  896:
    #####:  897:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  898:  {
    #####:  899:    return -1;
        -:  900:  }
        -:  901:
    #####:  902:      gainCard(choice2, state, 0, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:
        -:  907:      //discard trashed card
    #####:  908:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:  {
    #####:  910:    if (state->hand[currentPlayer][i] == j)
        -:  911:      {
    #####:  912:        discardCard(i, currentPlayer, state, 0);
    #####:  913:        break;
        -:  914:      }
        -:  915:  }
        -:  916:
        -:  917:
    #####:  918:      return 0;
        -:  919:
        -:  920:    case smithy:
        -:  921:
    #####:  922:      return cardEffectSmithy(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  923:
        -:  924:    case baron:
        -:  925:
    #####:  926:      return cardEffectBaron(card, choice1, choice2, choice3, state, handPos, bonus, currentPlayer);
        -:  927:
        -:  928:
        -:  929:    case great_hall:
        -:  930:      //+1 Card
    #####:  931:      drawCard(currentPlayer, state);
        -:  932:
        -:  933:      //+1 Actions
    #####:  934:      state->numActions++;
        -:  935:
        -:  936:      //discard card from hand
    #####:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
        -:  939:
        -:  940:    case minion:
        -:  941:      //+1 action
    #####:  942:      state->numActions++;
        -:  943:
        -:  944:      //discard card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
        -:  946:
    #####:  947:      if (choice1)    //+2 coins
        -:  948:  {
    #####:  949:    state->coins = state->coins + 2;
        -:  950:  }
        -:  951:
    #####:  952:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  953:  {
        -:  954:    //discard hand
    #####:  955:    while(numHandCards(state) > 0)
        -:  956:      {
    #####:  957:        discardCard(handPos, currentPlayer, state, 0);
        -:  958:      }
        -:  959:
        -:  960:    //draw 4
    #####:  961:    for (i = 0; i < 4; i++)
        -:  962:      {
    #####:  963:        drawCard(currentPlayer, state);
        -:  964:      }
        -:  965:
        -:  966:    //other players discard hand and redraw if hand size > 4
    #####:  967:    for (i = 0; i < state->numPlayers; i++)
        -:  968:      {
    #####:  969:        if (i != currentPlayer)
        -:  970:    {
    #####:  971:      if ( state->handCount[i] > 4 )
        -:  972:        {
        -:  973:          //discard hand
    #####:  974:          while( state->handCount[i] > 0 )
        -:  975:      {
    #####:  976:        discardCard(handPos, i, state, 0);
        -:  977:      }
        -:  978:
        -:  979:          //draw 4
    #####:  980:          for (j = 0; j < 4; j++)
        -:  981:      {
    #####:  982:        drawCard(i, state);
        -:  983:      }
        -:  984:        }
        -:  985:    }
        -:  986:      }
        -:  987:
        -:  988:  }
    #####:  989:      return 0;
        -:  990:
        -:  991:    case steward:
    #####:  992:      if (choice1 == 1)
        -:  993:  {
        -:  994:    //+2 cards
    #####:  995:    drawCard(currentPlayer, state);
    #####:  996:    drawCard(currentPlayer, state);
        -:  997:  }
    #####:  998:      else if (choice1 == 2)
        -:  999:  {
        -: 1000:    //+2 coins
    #####: 1001:    state->coins = state->coins + 2;
        -: 1002:  }
        -: 1003:      else
        -: 1004:  {
        -: 1005:    //trash 2 cards in hand
    #####: 1006:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1007:    discardCard(choice3, currentPlayer, state, 1);
        -: 1008:  }
        -: 1009:
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1012:      return 0;
        -: 1013:
        -: 1014:    case tribute:
    #####: 1015:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1016:  if (state->deckCount[nextPlayer] > 0){
    #####: 1017:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1018:    state->deckCount[nextPlayer]--;
        -: 1019:  }
    #####: 1020:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1021:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1022:    state->discardCount[nextPlayer]--;
        -: 1023:  }
        -: 1024:  else{
        -: 1025:    //No Card to Reveal
        -: 1026:    if (DEBUG){
        -: 1027:      printf("No cards to reveal\n");
        -: 1028:    }
        -: 1029:  }
        -: 1030:      }
        -: 1031:
        -: 1032:      else{
    #####: 1033:  if (state->deckCount[nextPlayer] == 0){
    #####: 1034:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1035:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1036:      state->deckCount[nextPlayer]++;
    #####: 1037:      state->discard[nextPlayer][i] = -1;
    #####: 1038:      state->discardCount[nextPlayer]--;
        -: 1039:    }
        -: 1040:
    #####: 1041:    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1042:  }
    #####: 1043:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:  state->deckCount[nextPlayer]--;
    #####: 1046:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:  state->deckCount[nextPlayer]--;
        -: 1049:      }
        -: 1050:
    #####: 1051:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1052:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1053:  state->playedCardCount++;
    #####: 1054:  tributeRevealedCards[1] = -1;
        -: 1055:      }
        -: 1056:
    #####: 1057:      for (i = 0; i <= 2; i ++){
    #####: 1058:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1059:    state->coins += 2;
        -: 1060:  }
        -: 1061:
    #####: 1062:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1063:    drawCard(currentPlayer, state);
    #####: 1064:    drawCard(currentPlayer, state);
        -: 1065:  }
        -: 1066:  else{//Action Card
    #####: 1067:    state->numActions = state->numActions + 2;
        -: 1068:  }
        -: 1069:      }
        -: 1070:
    #####: 1071:      return 0;
        -: 1072:
        -: 1073:    case ambassador:
    #####: 1074:      j = 0;    //used to check if player has enough cards to discard
        -: 1075:
    #####: 1076:      if (choice2 > 2 || choice2 < 0)
        -: 1077:  {
    #####: 1078:    return -1;
        -: 1079:  }
        -: 1080:
    #####: 1081:      if (choice1 == handPos)
        -: 1082:  {
    #####: 1083:    return -1;
        -: 1084:  }
        -: 1085:
    #####: 1086:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1087:  {
    #####: 1088:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1089:      {
    #####: 1090:        j++;
        -: 1091:      }
        -: 1092:  }
    #####: 1093:      if (j < choice2)
        -: 1094:  {
    #####: 1095:    return -1;
        -: 1096:  }
        -: 1097:
        -: 1098:      if (DEBUG)
        -: 1099:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1100:
        -: 1101:      //increase supply count for choosen card by amount being discarded
    #####: 1102:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1103:
        -: 1104:      //each other player gains a copy of revealed card
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:  {
    #####: 1107:    if (i != currentPlayer)
        -: 1108:      {
    #####: 1109:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1110:      }
        -: 1111:  }
        -: 1112:
        -: 1113:      //discard played card from hand
    #####: 1114:      discardCard(handPos, currentPlayer, state, 0);
        -: 1115:
        -: 1116:      //trash copies of cards returned to supply
    #####: 1117:      for (j = 0; j < choice2; j++)
        -: 1118:  {
    #####: 1119:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:      {
    #####: 1121:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1122:    {
    #####: 1123:      discardCard(i, currentPlayer, state, 1);
    #####: 1124:      break;
        -: 1125:    }
        -: 1126:      }
        -: 1127:  }
        -: 1128:
    #####: 1129:      return 0;
        -: 1130:
        -: 1131:    case cutpurse:
        -: 1132:
    #####: 1133:      updateCoins(currentPlayer, state, 2);
    #####: 1134:      for (i = 0; i < state->numPlayers; i++)
        -: 1135:  {
    #####: 1136:    if (i != currentPlayer)
        -: 1137:      {
    #####: 1138:        for (j = 0; j < state->handCount[i]; j++)
        -: 1139:    {
    #####: 1140:      if (state->hand[i][j] == copper)
        -: 1141:        {
    #####: 1142:          discardCard(j, i, state, 0);
    #####: 1143:          break;
        -: 1144:        }
    #####: 1145:      if (j == state->handCount[i])
        -: 1146:        {
    #####: 1147:          for (k = 0; k < state->handCount[i]; k++)
        -: 1148:      {
        -: 1149:        if (DEBUG)
        -: 1150:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1151:      }
    #####: 1152:          break;
        -: 1153:        }
        -: 1154:    }
        -: 1155:
        -: 1156:      }
        -: 1157:
        -: 1158:  }
        -: 1159:
        -: 1160:      //discard played card from hand
    #####: 1161:      discardCard(handPos, currentPlayer, state, 0);
        -: 1162:
    #####: 1163:      return 0;
        -: 1164:
        -: 1165:
        -: 1166:    case embargo:
        -: 1167:      //+2 Coins
    #####: 1168:      state->coins = state->coins + 2;
        -: 1169:
        -: 1170:      //see if selected pile is in play
    #####: 1171:      if ( state->supplyCount[choice1] == -1 )
        -: 1172:  {
    #####: 1173:    return -1;
        -: 1174:  }
        -: 1175:
        -: 1176:      //add embargo token to selected supply pile
    #####: 1177:      state->embargoTokens[choice1]++;
        -: 1178:
        -: 1179:      //trash card
    #####: 1180:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:
    #####: 1195:      if (choice1)
        -: 1196:  {
        -: 1197:    //gain coins equal to trashed card
    #####: 1198:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:    //trash card
    #####: 1200:    discardCard(choice1, currentPlayer, state, 1);
        -: 1201:  }
        -: 1202:
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:  if (i != currentPlayer){
    #####: 1210:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1211:    state->discardCount[i]++;
    #####: 1212:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:  }
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:  {
    #####: 1222:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:      {
    #####: 1224:        index = i;
    #####: 1225:        break;
        -: 1226:      }
        -: 1227:  }
    #####: 1228:      if (index > -1)
        -: 1229:  {
        -: 1230:    //trash both treasure cards
    #####: 1231:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:    discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:    //gain 4 Gold cards
    #####: 1235:    for (i = 0; i < 4; i++)
        -: 1236:      {
    #####: 1237:        gainCard(gold, state, 1, currentPlayer);
        -: 1238:      }
        -: 1239:
        -: 1240:    //return success
    #####: 1241:    return 1;
        -: 1242:  }
        -: 1243:
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
    43670: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:
        -: 1254:  //if card is not trashed, added to Played pile
    43670: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
    43670: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    43670: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:
        -: 1262:  //set played card to -1
    43670: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:
        -: 1265:  //remove card from player's hand
    43670: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
    43670: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else
        -: 1277:    {
    43670: 1278:      state->discardCount[currentPlayer]++;
    43670: 1279:      state->discard[currentPlayer][state->discardCount[currentPlayer] - 1] = state->hand[currentPlayer][handPos];
        -: 1280:      //replace discarded card with last card in hand
    43670: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    43670: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    43670: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:
    43670: 1288:  return 0;
        -: 1289:}
        -: 1290:
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
     5275: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:
        -: 1332:  //reset coin count
     5275: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
    31650: 1336:  for (i = 0; i < state->handCount[player]; i++)
        -: 1337:    {
    26375: 1338:      if (state->hand[player][i] == copper)
        -: 1339:  {
    20519: 1340:    state->coins += 1;
        -: 1341:  }
     5856: 1342:      else if (state->hand[player][i] == silver)
        -: 1343:  {
    #####: 1344:    state->coins += 2;
        -: 1345:  }
     5856: 1346:      else if (state->hand[player][i] == gold)
        -: 1347:  {
    #####: 1348:    state->coins += 3;
        -: 1349:  }
        -: 1350:    }
        -: 1351:
        -: 1352:  //add bonus
     5275: 1353:  state->coins += bonus;
        -: 1354:
     5275: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
